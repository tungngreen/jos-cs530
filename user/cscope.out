cscope 15 $HOME/igjae/LAB5/jos/user               0000044915
	@badsegment.c

3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

9 
asm
 volatile("movw $0x28,%ax; movw %ax,%ds");

10 
	}
}

	@breakpoint.c

3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

8 
asm
 volatile("int $3");

9 
	}
}

	@buggyhello.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
	`sys_˝uts
((*)1, 1);

10 
	}
}

	@buggyhello2.c

4 
	~<öc/lib.h
>

6 c⁄° *
	ghñlo
 = "hello, world\n";

9 
	$umaö
(
¨gc
, **
¨gv
)

11 
	`sys_˝uts
(
hñlo
, 1024*1024);

12 
	}
}

	@cat.c

1 
	~<öc/lib.h
>

3 
	gbuf
[8192];

6 
	$ˇt
(
f
, *
s
)

8 
n
;

9 
r
;

11 (
n
 = 
	`ªad
(
f
, 
buf
, ()(buf))) > 0)

12 i‡((
r
 = 
	`wrôe
(1, 
buf
, 
n
)) !=Ç)

13 
	`∑nic
("wrôêîr‹ c›yög %s: %e", 
s
, 
r
);

14 i‡(
n
 < 0)

15 
	`∑nic
("îr‹Ñódög %s: %e", 
s
, 
n
);

16 
	}
}

19 
	$umaö
(
¨gc
, **
¨gv
)

21 
f
, 
i
;

23 
bö¨y«me
 = "cat";

24 i‡(
¨gc
 == 1)

25 
	`ˇt
(0, "<stdin>");

27 
i
 = 1; i < 
¨gc
; i++) {

28 
f
 = 
	`›í
(
¨gv
[
i
], 
O_RDONLY
);

29 i‡(
f
 < 0)

30 
	`¥ötf
("ˇn'à›í %s: %e\n", 
¨gv
[
i
], 
f
);

32 
	`ˇt
(
f
, 
¨gv
[
i
]);

33 
	`˛o£
(
f
);

36 
	}
}

	@divzero.c

3 
	~<öc/lib.h
>

5 
	gzîo
;

8 
	$umaö
(
¨gc
, **
¨gv
)

10 
zîo
 = 0;

11 
	`˝rötf
("1/0 i†%08x!\n", 1/
zîo
);

12 
	}
}

	@dumbfork.c

4 
	~<öc/°rög.h
>

5 
	~<öc/lib.h
>

7 
ívid_t
 
dumbf‹k
();

10 
	$umaö
(
¨gc
, **
¨gv
)

12 
ívid_t
 
who
;

13 
i
;

16 
who
 = 
	`dumbf‹k
();

19 
i
 = 0; i < (
who
 ? 10 : 20); i++) {

20 
	`˝rötf
("%d: IámÅhê%s!\n", 
i
, 
who
 ? "parent" : "child");

21 
	`˝rötf
("%s__1\n", 
who
 ? "parent" : "child");

22 
	`sys_yõld
();

23 
	`˝rötf
("%s__2\n", 
who
 ? "parent" : "child");

25 
	}
}

28 
	$duµage
(
ívid_t
 
d°ív
, *
addr
)

30 
r
;

33 i‡((
r
 = 
	`sys_∑ge_Æloc
(
d°ív
, 
addr
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

34 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

35 i‡((
r
 = 
	`sys_∑ge_m≠
(
d°ív
, 
addr
, 0, 
UTEMP
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

36 
	`∑nic
("sys_∑ge_m≠: %e", 
r
);

37 
	`memmove
(
UTEMP
, 
addr
, 
PGSIZE
);

38 i‡((
r
 = 
	`sys_∑ge_unm≠
(0, 
UTEMP
)) < 0)

39 
	`∑nic
("sys_∑ge_unm≠: %e", 
r
);

40 
	}
}

42 
ívid_t


43 
	$dumbf‹k
()

45 
ívid_t
 
ívid
;

46 
uöt8_t
 *
addr
;

47 
r
;

48 
íd
[];

55 
ívid
 = 
	`sys_exof‹k
();

56 i‡(
ívid
 < 0)

57 
	`∑nic
("sys_exof‹k: %e", 
ívid
);

58 i‡(
ívid
 == 0) {

63 
thi£nv
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

70 
addr
 = (
uöt8_t
*Ë
UTEXT
;ádd∏< 
íd
;ádd∏+
PGSIZE
)

71 
	`duµage
(
ívid
, 
addr
);

74 
	`duµage
(
ívid
, 
	`ROUNDDOWN
(&
addr
, 
PGSIZE
));

77 i‡((
r
 = 
	`sys_ív_£t_°©us
(
ívid
, 
ENV_RUNNABLE
)) < 0)

78 
	`∑nic
("sys_ív_£t_°©us: %e", 
r
);

80  
ívid
;

81 
	}
}

	@echo.c

1 
	~<öc/lib.h
>

4 
	$umaö
(
¨gc
, **
¨gv
)

6 
i
, 
nÊag
;

8 
nÊag
 = 0;

9 i‡(
¨gc
 > 1 && 
	`°rcmp
(
¨gv
[1], "-n") == 0) {

10 
nÊag
 = 1;

11 
¨gc
--;

12 
¨gv
++;

14 
i
 = 1; i < 
¨gc
; i++) {

15 i‡(
i
 > 1)

16 
	`wrôe
(1, " ", 1);

17 
	`wrôe
(1, 
¨gv
[
i
], 
	`°æí
(argv[i]));

19 i‡(!
nÊag
)

20 
	`wrôe
(1, "\n", 1);

21 
	}
}

	@evilhello.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

10 
	`sys_˝uts
((*)0x800420000c, 100);

11 
	}
}

	@fairness.c

5 
	~<öc/lib.h
>

8 
	$umaö
(
¨gc
, **
¨gv
)

10 
ívid_t
 
who
, 
id
;

12 
id
 = 
	`sys_gëívid
();

14 i‡(
thi£nv
 =&
ívs
[1]) {

16 
	`ùc_ªcv
(&
who
, 0, 0);

17 
	`˝rötf
("%xÑecv from %x\n", 
id
, 
who
);

20 
	`˝rötf
("%xÜo› sídögÅÿ%x\n", 
id
, 
ívs
[1].
ív_id
);

22 
	`ùc_£nd
(
ívs
[1].
ív_id
, 0, 0, 0);

24 
	}
}

	@faultalloc.c

3 
	~<öc/lib.h
>

6 
	$h™dÀr
(
UTøp‰ame
 *
utf
)

8 
r
;

9 *
addr
 = (*)
utf
->
utf_Áu…_va
;

11 
	`˝rötf
("Áu… %x\n", 
addr
);

12 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
	`ROUNDDOWN
(
addr
, 
PGSIZE
),

13 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

14 
	`∑nic
("Æloˇtögáà%x i¿∑gêÁu… h™dÀr: %e", 
addr
, 
r
);

15 
	`¢¥ötf
((*Ë
addr
, 100, "this string was faulted inát %x",áddr);

16 
	}
}

19 
	$umaö
(
¨gc
, **
¨gv
)

21 
	`£t_pgÁu…_h™dÀr
(
h™dÀr
);

22 
	`˝rötf
("%s\n", (*)0xDeadBeef);

23 
	`˝rötf
("%s\n", (*)0xCafeBffe);

24 
	}
}

	@faultallocbad.c

4 
	~<öc/lib.h
>

7 
	$h™dÀr
(
UTøp‰ame
 *
utf
)

9 
r
;

10 *
addr
 = (*)
utf
->
utf_Áu…_va
;

12 
	`˝rötf
("Áu… %x\n", 
addr
);

13 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
	`ROUNDDOWN
(
addr
, 
PGSIZE
),

14 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

15 
	`∑nic
("Æloˇtögáà%x i¿∑gêÁu… h™dÀr: %e", 
addr
, 
r
);

16 
	`¢¥ötf
((*Ë
addr
, 100, "this string was faulted inát %x",áddr);

17 
	}
}

20 
	$umaö
(
¨gc
, **
¨gv
)

22 
	`£t_pgÁu…_h™dÀr
(
h™dÀr
);

23 
	`sys_˝uts
((*)0xDEADBEEF, 4);

24 
	}
}

	@faultbadhandler.c

6 
	~<öc/lib.h
>

9 
	$umaö
(
¨gc
, **
¨gv
)

11 
	`sys_∑ge_Æloc
(0, (*Ë(
UXSTACKTOP
 - 
PGSIZE
), 
PTE_P
|
PTE_U
|
PTE_W
);

12 
	`sys_ív_£t_pgÁu…_upˇŒ
(0, (*) 0xDeadBeef);

14 
	}
}

	@faultdie.c

3 
	~<öc/lib.h
>

6 
	$h™dÀr
(
UTøp‰ame
 *
utf
)

8 *
addr
 = (*)
utf
->
utf_Áu…_va
;

9 
uöt32_t
 
îr
 = 
utf
->
utf_îr
;

10 
	`˝rötf
("òÁu…edáàv®%x,Éº %x\n", 
addr
, 
îr
 & 7);

11 
	`sys_ív_de°roy
(
	`sys_gëívid
());

12 
	}
}

15 
	$umaö
(
¨gc
, **
¨gv
)

17 
	`£t_pgÁu…_h™dÀr
(
h™dÀr
);

19 
	}
}

	@faultevilhandler.c

3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

8 
	`sys_∑ge_Æloc
(0, (*Ë(
UXSTACKTOP
 - 
PGSIZE
), 
PTE_P
|
PTE_U
|
PTE_W
);

9 
	`sys_ív_£t_pgÁu…_upˇŒ
(0, (*) 0xF0100020);

11 
	}
}

	@faultnostack.c

3 
	~<öc/lib.h
>

5 
_pgÁu…_upˇŒ
();

8 
	$umaö
(
¨gc
, **
¨gv
)

10 
	`sys_ív_£t_pgÁu…_upˇŒ
(0, (*Ë
_pgÁu…_upˇŒ
);

12 
	}
}

	@faultread.c

3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

8 
	`˝rötf
("IÑead %08x fromÜocation 0!\n", *(*)0);

9 
	}
}

	@faultreadkernel.c

3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

8 
	`˝rötf
("IÑead %08x fromÜocation 0x8004000000!\n", *(*)0x8004000000);

9 
	}
}

	@faultregs.c

3 
	~<öc/lib.h
>

5 
	sªgs


7 
PushRegs
 
	mªgs
;

8 
uöçå_t
 
	meù
;

9 
uöt64_t
 
	meÊags
;

10 
uöçå_t
 
	me•
;

13 
	#SAVE_REGS
(
ba£
) \

14 "\tmovq %%r14, 0x8("
ba£
")\n" \

15 "\tmovq %%r13, 0x10("
ba£
")\n" \

16 "\tmovq %%r12, 0x18("
ba£
")\n" \

17 "\tmovq %%r11, 0x20("
ba£
")\n" \

18 "\tmovq %%r10, 0x28("
ba£
")\n" \

19 "\tmovq %%r9, 0x30("
ba£
")\n" \

20 "\tmovq %%r8, 0x38("
ba£
")\n" \

21 "\tmovq %%rsi, 0x40("
ba£
")\n" \

22 "\tmovq %%rdi, 0x48("
ba£
")\n" \

23 "\tmovq %%rbp, 0x50("
ba£
")\n" \

24 "\tmovq %%rdx, 0x58("
ba£
")\n" \

25 "\tmovq %%rcx, 0x60("
ba£
")\n" \

26 "\tmovq %%rbx, 0x68("
ba£
")\n" \

27 "\tmovq %%øx, 0x70("
ba£
")\n" \

28 "\tmovq %%r•, 0x88("
ba£
")\n"

	)

30 
	#LOAD_REGS
(
ba£
) \

31 "\tmovq 0x8("
ba£
"), %%r14\n" \

32 "\tmovq 0x10("
ba£
"), %%r13\n" \

33 "\tmovq 0x18("
ba£
"), %%r12 \n" \

34 "\tmovq 0x20("
ba£
"), %%r11\n" \

35 "\tmovq 0x28("
ba£
"), %%r10\n" \

36 "\tmovq 0x30("
ba£
"), %%r9\n" \

37 "\tmovq 0x38("
ba£
"), %%r8\n" \

38 "\tmovq 0x40("
ba£
"), %%rsi\n" \

39 "\tmovq 0x48("
ba£
"), %%rdi\n" \

40 "\tmovq 0x50("
ba£
"), %%rbp\n" \

41 "\tmovq 0x58("
ba£
"), %%rdx\n" \

42 "\tmovq 0x60("
ba£
"), %%rcx\n" \

43 "\tmovq 0x68("
ba£
"), %%rbx\n" \

44 "\tmovq 0x70("
ba£
"), %%rax\n" \

45 "\tmovq 0x88("
ba£
"), %%r•\n"

	)

47 
ªgs
 
	gbef‹e
, 
	gdurög
, 
	ga·î
;

50 
	$check_ªgs
(
ªgs
* 
a
, c⁄° *
™
, ªgs* 
b
, c⁄° *
bn
,

51 c⁄° *
ã°«me
)

53 
mism©ch
 = 0;

55 
	`˝rötf
("%-6†%-8†%-8s\n", "", 
™
, 
bn
);

57 
	#CHECK
(
«me
, 
fõld
) \

59 
	`˝rötf
("%-6†%08x %08x ", #«me, 
a
->
fõld
, 
b
->field); \

60 i‡(
a
->
fõld
 =
b
->field) \

61 
	`˝rötf
("OK\n"); \

63 
	`˝rötf
("MISMATCH\n"); \

64 
mism©ch
 = 1; \

66 } 0)

	)

68 
	`CHECK
(
edi
, 
ªgs
.
ªg_rdi
);

69 
	`CHECK
(
esi
, 
ªgs
.
ªg_rsi
);

70 
	`CHECK
(
ebp
, 
ªgs
.
ªg_rbp
);

71 
	`CHECK
(
ebx
, 
ªgs
.
ªg_rbx
);

72 
	`CHECK
(
edx
, 
ªgs
.
ªg_rdx
);

73 
	`CHECK
(
ecx
, 
ªgs
.
ªg_rcx
);

74 
	`CHECK
(
óx
, 
ªgs
.
ªg_øx
);

75 
	`CHECK
(
eù
,Éip);

76 
	`CHECK
(
eÊags
,Éflags);

77 
	`CHECK
(
e•
,Ésp);

79 #unde‡
CHECK


82 i‡(!
mism©ch
)

83 
	`˝rötf
("Regi°î†%†OK\n", 
ã°«me
);

85 
	`˝rötf
("Regi°î†%†MISMATCH\n", 
ã°«me
);

86 
	}
}

89 
	$pgÁu…
(
UTøp‰ame
 *
utf
)

91 
r
;

93 i‡(
utf
->
utf_Áu…_va
 !(
uöt64_t
)
UTEMP
)

94 
	`∑nic
("pgfaultÉxpectedát UTEMP, got 0x%08x (eip %08x)",

95 
utf
->
utf_Áu…_va
, utf->
utf_rù
);

98 
durög
.
ªgs
 = 
utf
->
utf_ªgs
;

99 
durög
.
eù
 = 
utf
->
utf_rù
;

100 
durög
.
eÊags
 = 
utf
->
utf_eÊags
 & 0xfff;

101 
durög
.
e•
 = 
utf
->
utf_r•
;

102 
	`check_ªgs
(&
bef‹e
, "bef‹e", &
durög
, "during", "in UTrapframe");

105 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
UTEMP
, 
PTE_U
|
PTE_P
|
PTE_W
)) < 0)

106 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

107 
	}
}

110 
	$umaö
(
¨gc
, **
¨gv
)

112 
	`£t_pgÁu…_h™dÀr
(
pgÁu…
);

114 
__asm
 
	`__vﬁ©ûe
(

134 
	`SAVE_REGS
("%%r15")

141 
	`SAVE_REGS
("%%r15")

146 
	`LOAD_REGS
("%%r15")

156 : : "r" (&
bef‹e
), "r" (&
a·î
) : "memory", "cc");

161 i‡(*(*)
UTEMP
 != 42)

162 
	`˝rötf
("EIPáfterÖage-fault MISMATCH\n");

163 
a·î
.
eù
 = 
bef‹e
.eip;

165 
	`check_ªgs
(&
bef‹e
, "bef‹e", &
a·î
, "after", "afterÖage-fault");

166 
	}
}

	@faultwrite.c

3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

9 
	}
}

	@faultwritekernel.c

3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

9 
	}
}

	@forktree.c

3 
	~<öc/lib.h
>

5 
	#DEPTH
 3

	)

7 
f‹kåì
(c⁄° *
cur
);

10 
	$f‹kchûd
(c⁄° *
cur
, 
bønch
)

12 
nxt
[
DEPTH
+1];

14 i‡(
	`°æí
(
cur
Ë>
DEPTH
)

17 
	`¢¥ötf
(
nxt
, 
DEPTH
+1, "%s%c", 
cur
, 
bønch
);

18 i‡(
	`f‹k
() == 0) {

19 
	`f‹kåì
(
nxt
);

20 
	`exô
();

22 
	}
}

25 
	$f‹kåì
(c⁄° *
cur
)

27 
	`˝rötf
("%04x: Iám '%s'\n", 
	`sys_gëívid
(), 
cur
);

29 
	`f‹kchûd
(
cur
, '0');

30 
	`f‹kchûd
(
cur
, '1');

31 
	}
}

34 
	$umaö
(
¨gc
, **
¨gv
)

36 
	`f‹kåì
("");

37 
	}
}

	@hello.c

2 
	~<öc/lib.h
>

5 
	$umaö
(
¨gc
, **
¨gv
)

7 
	`˝rötf
("hello, world\n");

8 
	`˝rötf
("òamÉnvú⁄míà%08x\n", 
thi£nv
->
ív_id
);

9 
	}
}

	@icode.c

1 
	~<öc/lib.h
>

3 
	#MOTD
 "/mŸd"

	)

6 
	$umaö
(
¨gc
, **
¨gv
)

8 
fd
, 
n
, 
r
;

9 
buf
[512+1];

11 
bö¨y«me
 = "icode";

13 
	`˝rötf
("icode startup\n");

15 
	`˝rötf
("icode: open /motd\n");

16 i‡((
fd
 = 
	`›í
(
MOTD
, 
O_RDONLY
)) < 0)

17 
	`∑nic
("icode: o≥¿/mŸd: %e", 
fd
);

19 
	`˝rötf
("icode:Ñead /motd\n");

20 (
n
 = 
	`ªad
(
fd
, 
buf
,  buf-1)) > 0) {

21 
	`˝rötf
("Writing MOTD\n");

22 
	`sys_˝uts
(
buf
, 
n
);

25 
	`˝rötf
("icode: close /motd\n");

26 
	`˛o£
(
fd
);

28 
	`˝rötf
("icode: spawn /sbin/init\n");

29 i‡((
r
 = 
	`•aw∆
("/sbin/init", "init", "initarg1", "initarg2", (*)0)) < 0)

30 
	`∑nic
("icode: s∑w¿/sbö/öô: %e", 
r
);

31 
	`˝rötf
("icode:Éxiting\n");

32 
	}
}

	@idle.c

3 
	~<öc/x86.h
>

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
bö¨y«me
 = "idle";

17 
	`sys_yõld
();

19 
	}
}

	@init.c

1 
	~<öc/lib.h
>

4 
	mmsg1
[5000];

5 
	mmsg2
[1000];

6 } 
	gd©a
 = {

11 
	gbss
[6000];

14 
	$sum
(c⁄° *
s
, 
n
)

16 
i
, 
tŸ
 = 0;

17 
i
 = 0; i < 
n
; i++)

18 
tŸ
 ^
i
 * 
s
[i];

19  
tŸ
;

20 
	}
}

23 
	$umaö
(
¨gc
, **
¨gv
)

25 
i
, 
r
, 
x
, 
w™t
;

26 
¨gs
[256];

28 
	`˝rötf
("init:Ñunning\n");

30 
w™t
 = 0xf989e;

31 i‡((
x
 = 
	`sum
((*)&
d©a
,  d©a)Ë!
w™t
)

32 
	`˝rötf
("init: data isÇot initialized: got sum %08x wanted %08x\n",

33 
x
, 
w™t
);

35 
	`˝rötf
("init: data seems okay\n");

36 i‡((
x
 = 
	`sum
(
bss
,  bss)) != 0)

37 
	`˝rötf
("bs†i†nŸ inôülized: w™ãd sum 0 gŸ %08x\n", 
x
);

39 
	`˝rötf
("init: bss seems okay\n");

42 
	`°rˇt
(
¨gs
, "init:árgs:");

43 
i
 = 0; i < 
¨gc
; i++) {

44 
	`°rˇt
(
¨gs
, " '");

45 
	`°rˇt
(
¨gs
, 
¨gv
[
i
]);

46 
	`°rˇt
(
¨gs
, "'");

48 
	`˝rötf
("%s\n", 
¨gs
);

50 
	`˝rötf
("init:Ñunning sh\n");

53 
	`˛o£
(0);

54 i‡((
r
 = 
	`›íc⁄s
()) < 0)

55 
	`∑nic
("›íc⁄s: %e", 
r
);

56 i‡(
r
 != 0)

57 
	`∑nic
("fú° o≥nc⁄†u£d fd %d", 
r
);

58 i‡((
r
 = 
	`dup
(0, 1)) < 0)

59 
	`∑nic
("dup: %e", 
r
);

61 
	`˝rötf
("init: starting sh\n");

62 
r
 = 
	`•aw∆
("/bin/sh", "sh", (*)0);

63 i‡(
r
 < 0) {

64 
	`˝rötf
("öô: s∑w¿sh: %e\n", 
r
);

67 
	`˝rötf
("init waiting\n");

68 
	`waô
(
r
);

70 
	}
}

	@initsh.c

1 
	~<öc/lib.h
>

4 
	$umaö
(
¨gc
, **
¨gv
)

6 
i
, 
r
, 
x
, 
w™t
;

8 
	`˝rötf
("initsh:Ñunning sh\n");

11 
	`˛o£
(0);

12 i‡((
r
 = 
	`›íc⁄s
()) < 0)

13 
	`∑nic
("›íc⁄s: %e", 
r
);

14 i‡(
r
 != 0)

15 
	`∑nic
("fú° o≥nc⁄†u£d fd %d", 
r
);

16 i‡((
r
 = 
	`dup
(0, 1)) < 0)

17 
	`∑nic
("dup: %e", 
r
);

19 
	`˝rötf
("init: starting sh\n");

20 
r
 = 
	`•aw∆
("/sh", "sh", (*)0);

21 i‡(
r
 < 0) {

22 
	`˝rötf
("öô: s∑w¿sh: %e\n", 
r
);

25 
	`waô
(
r
);

27 
	}
}

	@ls.c

1 
	~<öc/lib.h
>

3 
	gÊag
[256];

5 
lsdú
(const *, const *);

6 
ls1
(c⁄° *, 
boﬁ
, 
off_t
, const *);

9 
	$ls
(c⁄° *
∑th
, c⁄° *
¥efix
)

11 
r
;

12 
Sèt
 
°
;

14 i‡((
r
 = 
	`°©
(
∑th
, &
°
)) < 0)

15 
	`∑nic
("°© %s: %e", 
∑th
, 
r
);

16 i‡(
°
.
°_isdú
 && !
Êag
['d'])

17 
	`lsdú
(
∑th
, 
¥efix
);

19 
	`ls1
(0, 
°
.
°_isdú
, st.
°_size
, 
∑th
);

20 
	}
}

23 
	$lsdú
(c⁄° *
∑th
, c⁄° *
¥efix
)

25 
fd
, 
n
;

26 
Fûe
 
f
;

28 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) < 0)

29 
	`∑nic
("›í %s: %e", 
∑th
, 
fd
);

30 (
n
 = 
	`ªadn
(
fd
, &
f
,  f)) ==  f)

31 i‡(
f
.
f_«me
[0])

32 
	`ls1
(
¥efix
, 
f
.
f_ty≥
==
FTYPE_DIR
, f.
f_size
, f.
f_«me
);

33 i‡(
n
 > 0)

34 
	`∑nic
("sh‹àªad i¿dúe˘‹y %s", 
∑th
);

35 i‡(
n
 < 0)

36 
	`∑nic
("îr‹Ñódög dúe˘‹y %s: %e", 
∑th
, 
n
);

37 
	}
}

40 
	$ls1
(c⁄° *
¥efix
, 
boﬁ
 
isdú
, 
off_t
 
size
, c⁄° *
«me
)

42 c⁄° *
£p
;

44 if(
Êag
['l'])

45 
	`¥ötf
("%11d %¯", 
size
, 
isdú
 ? 'd' : '-');

46 if(
¥efix
) {

47 i‡(
¥efix
[0] &&Öªfix[
	`°æí
(prefix)-1] != '/')

48 
£p
 = "/";

50 
£p
 = "";

51 
	`¥ötf
("%s%s", 
¥efix
, 
£p
);

53 
	`¥ötf
("%s", 
«me
);

54 if(
Êag
['F'] && 
isdú
)

55 
	`¥ötf
("/");

56 
	`¥ötf
("\n");

57 
	}
}

60 
	$ußge
()

62 
	`¥ötf
("usage:Üs [-dFl] [file...]\n");

63 
	`exô
();

64 
	}
}

67 
	$umaö
(
¨gc
, **
¨gv
)

69 
i
;

70 
Arg°©e
 
¨gs
;

72 
	`¨g°¨t
(&
¨gc
, 
¨gv
, &
¨gs
);

73 (
i
 = 
	`¨g√xt
(&
¨gs
)) >= 0)

74 
i
) {

78 
Êag
[
i
]++;

81 
	`ußge
();

84 i‡(
¨gc
 == 1)

85 
	`ls
("/", "");

87 
i
 = 1; i < 
¨gc
; i++)

88 
	`ls
(
¨gv
[
i
],árgv[i]);

90 
	}
}

	@lsfd.c

1 
	~<öc/lib.h
>

4 
	$ußge
()

6 
	`˝rötf
("usage:Üsfd [-1]\n");

7 
	`exô
();

8 
	}
}

11 
	$umaö
(
¨gc
, **
¨gv
)

13 
i
, 
u£Âröt
 = 0;

14 
Sèt
 
°
;

15 
Arg°©e
 
¨gs
;

17 
	`¨g°¨t
(&
¨gc
, 
¨gv
, &
¨gs
);

18 (
i
 = 
	`¨g√xt
(&
¨gs
)) >= 0)

19 i‡(
i
 == '1')

20 
u£Âröt
 = 1;

22 
	`ußge
();

24 
i
 = 0; i < 32; i++)

25 i‡(
	`f°©
(
i
, &
°
) >= 0) {

26 i‡(
u£Âröt
)

27 
	`Ârötf
(1, "fd %d:Çame %s isdir %d size %d dev %s\n",

28 
i
, 
°
.
°_«me
, st.
°_isdú
,

29 
°
.
°_size
, st.
°_dev
->
dev_«me
);

31 
	`˝rötf
("fd %d:Çame %s isdir %d size %d dev %s\n",

32 
i
, 
°
.
°_«me
, st.
°_isdú
,

33 
°
.
°_size
, st.
°_dev
->
dev_«me
);

35 
	}
}

	@num.c

1 
	~<öc/lib.h
>

3 
	gbﬁ
 = 1;

4 
	glöe
 = 0;

7 
	$num
(
f
, c⁄° *
s
)

9 
n
;

10 
r
;

11 
c
;

13 (
n
 = 
	`ªad
(
f
, &
c
, 1)) > 0) {

14 i‡(
bﬁ
) {

15 
	`¥ötf
("%5d ", ++
löe
);

16 
bﬁ
 = 0;

18 i‡((
r
 = 
	`wrôe
(1, &
c
, 1)) != 1)

19 
	`∑nic
("wrôêîr‹ c›yög %s: %e", 
s
, 
r
);

20 i‡(
c
 == '\n')

21 
bﬁ
 = 1;

23 i‡(
n
 < 0)

24 
	`∑nic
("îr‹Ñódög %s: %e", 
s
, 
n
);

25 
	}
}

28 
	$umaö
(
¨gc
, **
¨gv
)

30 
f
, 
i
;

32 
bö¨y«me
 = "num";

33 i‡(
¨gc
 == 1)

34 
	`num
(0, "<stdin>");

36 
i
 = 1; i < 
¨gc
; i++) {

37 
f
 = 
	`›í
(
¨gv
[
i
], 
O_RDONLY
);

38 i‡(
f
 < 0)

39 
	`∑nic
("ˇn'à›í %s: %e", 
¨gv
[
i
], 
f
);

41 
	`num
(
f
, 
¨gv
[
i
]);

42 
	`˛o£
(
f
);

45 
	`exô
();

46 
	}
}

	@pingpong.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
ívid_t
 
who
;

11 i‡((
who
 = 
	`f‹k
()) != 0) {

13 
	`˝rötf
("£nd 0 from %xÅÿ%x\n", 
	`sys_gëívid
(), 
who
);

14 
	`ùc_£nd
(
who
, 0, 0, 0);

18 
uöt32_t
 
i
 = 
	`ùc_ªcv
(&
who
, 0, 0);

19 
	`˝rötf
("%x gŸ %d from %x\n", 
	`sys_gëívid
(), 
i
, 
who
);

20 i‡(
i
 == 10)

22 
i
++;

23 
	`ùc_£nd
(
who
, 
i
, 0, 0);

24 i‡(
i
 == 10)

28 
	}
}

	@pingpongs.c

4 
	~<öc/lib.h
>

6 
uöt32_t
 
	gvÆ
;

9 
	$umaö
(
¨gc
, **
¨gv
)

11 
ívid_t
 
who
;

12 
uöt32_t
 
i
;

14 
i
 = 0;

15 i‡((
who
 = 
	`sf‹k
()) != 0) {

16 
	`˝rötf
("òam %08x;Åhi£nv i†%p\n", 
	`sys_gëívid
(), 
thi£nv
);

18 
	`˝rötf
("£nd 0 from %xÅÿ%x\n", 
	`sys_gëívid
(), 
who
);

19 
	`ùc_£nd
(
who
, 0, 0, 0);

23 
	`ùc_ªcv
(&
who
, 0, 0);

24 
	`˝rötf
("%x gŸ %d from %x (thi£nv i†%∞%x)\n", 
	`sys_gëívid
(), 
vÆ
, 
who
, 
thi£nv
,Åhi£nv->
ív_id
);

25 i‡(
vÆ
 == 10)

27 ++
vÆ
;

28 
	`ùc_£nd
(
who
, 0, 0, 0);

29 i‡(
vÆ
 == 10)

33 
	}
}

	@primes.c

11 
	~<öc/lib.h
>

14 
	$¥imïroc
()

16 
i
, 
id
, 
p
;

17 
ívid_t
 
ívid
;

20 
t›
:

21 
p
 = 
	`ùc_ªcv
(&
ívid
, 0, 0);

22 
	`˝rötf
("CPU %d: %d ", 
thi£nv
->
ív_˝unum
, 
p
);

25 i‡((
id
 = 
	`f‹k
()) < 0)

26 
	`∑nic
("f‹k: %e", 
id
);

27 i‡(
id
 == 0)

28 
t›
;

32 
i
 = 
	`ùc_ªcv
(&
ívid
, 0, 0);

33 i‡(
i
 % 
p
)

34 
	`ùc_£nd
(
id
, 
i
, 0, 0);

36 
	}
}

39 
	$umaö
(
¨gc
, **
¨gv
)

41 
i
, 
id
;

44 i‡((
id
 = 
	`f‹k
()) < 0)

45 
	`∑nic
("f‹k: %e", 
id
);

46 i‡(
id
 == 0)

47 
	`¥imïroc
();

50 
i
 = 2; ; i++)

51 
	`ùc_£nd
(
id
, 
i
, 0, 0);

52 
	}
}

	@primespipe.c

11 
	~<öc/lib.h
>

14 
	$¥imïroc
(
fd
)

16 
i
, 
id
, 
p
, 
pfd
[2], 
wfd
, 
r
;

19 
t›
:

20 i‡((
r
 = 
	`ªadn
(
fd
, &
p
, 4)) != 4)

21 
	`∑nic
("¥imïro¯couldÇŸÑód inôü»¥ime: %d, %e", 
r
,Ñ >= 0 ? 0 :Ñ);

23 
	`˝rötf
("%d\n", 
p
);

26 i‡((
i
=
	`pùe
(
pfd
)) < 0)

27 
	`∑nic
("pùe: %e", 
i
);

28 i‡((
id
 = 
	`f‹k
()) < 0)

29 
	`∑nic
("f‹k: %e", 
id
);

30 i‡(
id
 == 0) {

31 
	`˛o£
(
fd
);

32 
	`˛o£
(
pfd
[1]);

33 
fd
 = 
pfd
[0];

34 
t›
;

37 
	`˛o£
(
pfd
[0]);

38 
wfd
 = 
pfd
[1];

42 i‡((
r
=
	`ªadn
(
fd
, &
i
, 4)) != 4)

43 
	`∑nic
("¥imïro¯%dÑód¿%d %d %e", 
p
, 
fd
, 
r
,Ñ >= 0 ? 0 :Ñ);

44 i‡(
i
%
p
)

45 i‡((
r
=
	`wrôe
(
wfd
, &
i
, 4)) != 4)

46 
	`∑nic
("¥imïro¯%d wrôe: %d %e", 
p
, 
r
,Ñ >= 0 ? 0 :Ñ);

48 
	}
}

51 
	$umaö
(
¨gc
, **
¨gv
)

53 
i
, 
id
, 
p
[2], 
r
;

55 
bö¨y«me
 = "primespipe";

57 i‡((
i
=
	`pùe
(
p
)) < 0)

58 
	`∑nic
("pùe: %e", 
i
);

61 i‡((
id
=
	`f‹k
()) < 0)

62 
	`∑nic
("f‹k: %e", 
id
);

64 i‡(
id
 == 0) {

65 
	`˛o£
(
p
[1]);

66 
	`¥imïroc
(
p
[0]);

69 
	`˛o£
(
p
[0]);

72 
i
=2;; i++)

73 i‡((
r
=
	`wrôe
(
p
[1], &
i
, 4)) != 4)

74 
	`∑nic
("gíî©‹ wrôe: %d, %e", 
r
,Ñ >= 0 ? 0 :Ñ);

75 
	}
}

	@sendpage.c

4 
	~<öc/lib.h
>

6 c⁄° *
	g°r1
 = "hello childÉnvironment! howáre you?";

7 c⁄° *
	g°r2
 = "helloÖarentÉnvironment! I'm good.";

9 
	#TEMP_ADDR
 ((*)0xa00000)

	)

10 
	#TEMP_ADDR_CHILD
 ((*)0xb00000)

	)

13 
	$umaö
(
¨gc
, **
¨gv
)

15 
ívid_t
 
who
;

17 i‡((
who
 = 
	`f‹k
()) == 0) {

19 
	`ùc_ªcv
(&
who
, 
TEMP_ADDR_CHILD
, 0);

20 
	`˝rötf
("%x gŸ mesßgê: %s\n", 
who
, 
TEMP_ADDR_CHILD
);

21 i‡(
	`°∫cmp
(
TEMP_ADDR_CHILD
, 
°r1
, 
	`°æí
(str1)) == 0)

22 
	`˝rötf
("childÑeceived correct message\n");

24 
	`mem˝y
(
TEMP_ADDR_CHILD
, 
°r2
, 
	`°æí
(
°r1
) + 1);

25 
	`ùc_£nd
(
who
, 0, 
TEMP_ADDR_CHILD
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

30 
	`sys_∑ge_Æloc
(
thi£nv
->
ív_id
, 
TEMP_ADDR
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

31 
	`mem˝y
(
TEMP_ADDR
, 
°r1
, 
	`°æí
(str1) + 1);

32 
	`ùc_£nd
(
who
, 0, 
TEMP_ADDR
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

34 
	`ùc_ªcv
(&
who
, 
TEMP_ADDR
, 0);

35 
	`˝rötf
("%x gŸ mesßgê: %s\n", 
who
, 
TEMP_ADDR
);

36 i‡(
	`°∫cmp
(
TEMP_ADDR
, 
°r2
, 
	`°æí
(str2)) == 0)

37 
	`˝rötf
("parentÑeceived correct message\n");

39 
	}
}

	@sh.c

1 
	~<öc/lib.h
>

3 
	#BUFSIZ
 1024

	)

4 
	gdebug
 = 0;

6 * 
	gPATH
[] = {"/bin/","/"};

7 
	g≈©hs
 = 2;

14 
gëtokí
(*
s
, **
tokí
);

21 
	#MAXARGS
 16

	)

23 
	$runcmd
(* 
s
)

25 *
¨gv
[
MAXARGS
], *
t
, 
¨gv0buf
[
BUFSIZ
];

26 
¨gc
, 
c
, 
i
, 
r
, 
p
[2], 
fd
, 
pùe_chûd
;

28 
pùe_chûd
 = 0;

29 
	`gëtokí
(
s
, 0);

31 
agaö
:

32 
¨gc
 = 0;

34 (
c
 = 
	`gëtokí
(0, &
t
))) {

37 i‡(
¨gc
 =
MAXARGS
) {

38 
	`˝rötf
("too manyárguments\n");

39 
	`exô
();

41 
¨gv
[
¨gc
++] = 
t
;

46 i‡(
	`gëtokí
(0, &
t
) != 'w') {

47 
	`˝rötf
("syntaxÉrror: <Çot followed by word\n");

48 
	`exô
();

50 i‡((
fd
 = 
	`›í
(
t
, 
O_RDONLY
)) < 0) {

51 
	`˝rötf
("›í %†f‹Ñód: %e", 
t
, 
fd
);

52 
	`exô
();

54 i‡(
fd
 != 0) {

55 
	`dup
(
fd
, 0);

56 
	`˛o£
(
fd
);

62 i‡(
	`gëtokí
(0, &
t
) != 'w') {

63 
	`˝rötf
("syntaxÉrror: >Çot followed by word\n");

64 
	`exô
();

66 i‡((
fd
 = 
	`›í
(
t
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
)) < 0) {

67 
	`˝rötf
("›í %†f‹ wrôe: %e", 
t
, 
fd
);

68 
	`exô
();

70 i‡(
fd
 != 1) {

71 
	`dup
(
fd
, 1);

72 
	`˛o£
(
fd
);

77 i‡((
r
 = 
	`pùe
(
p
)) < 0) {

78 
	`˝rötf
("pùe: %e", 
r
);

79 
	`exô
();

81 i‡(
debug
)

82 
	`˝rötf
("PIPE: %d %d\n", 
p
[0],Ö[1]);

83 i‡((
r
 = 
	`f‹k
()) < 0) {

84 
	`˝rötf
("f‹k: %e", 
r
);

85 
	`exô
();

87 i‡(
r
 == 0) {

88 i‡(
p
[0] != 0) {

89 
	`dup
(
p
[0], 0);

90 
	`˛o£
(
p
[0]);

92 
	`˛o£
(
p
[1]);

93 
agaö
;

95 
pùe_chûd
 = 
r
;

96 i‡(
p
[1] != 1) {

97 
	`dup
(
p
[1], 1);

98 
	`˛o£
(
p
[1]);

100 
	`˛o£
(
p
[0]);

101 
runô
;

103 
	`∑nic
("|Çot implemented");

108 
runô
;

111 
	`∑nic
("badÑëu∫ %d from gëtokí", 
c
);

117 
runô
:

119 if(
¨gc
 == 0) {

120 i‡(
debug
)

121 
	`˝rötf
("EMPTY COMMAND\n");

126 
Sèt
 
°
;

127 
i
=0;i<
≈©hs
;i++) {

128 
	`°r˝y
(
¨gv0buf
, 
PATH
[
i
]);

129 
	`°rˇt
(
¨gv0buf
, 
¨gv
[0]);

130 
r
 = 
	`°©
(
¨gv0buf
, &
°
);

131 if(
r
==0) {

132 
¨gv
[0] = 
¨gv0buf
;

141 i‡(
¨gv
[0][0] != '/') {

142 
¨gv0buf
[0] = '/';

143 
	`°r˝y
(
¨gv0buf
 + 1, 
¨gv
[0]);

144 
¨gv
[0] = 
¨gv0buf
;

146 
¨gv
[
¨gc
] = 0;

149 i‡(
debug
) {

150 
	`˝rötf
("[%08x] SPAWN:", 
thi£nv
->
ív_id
);

151 
i
 = 0; 
¨gv
[i]; i++)

152 
	`˝rötf
(" %s", 
¨gv
[
i
]);

153 
	`˝rötf
("\n");

157 i‡((
r
 = 
	`•awn
(
¨gv
[0], (const **)árgv)) < 0)

158 
	`˝rötf
("•aw¿%s: %e\n", 
¨gv
[0], 
r
);

162 
	`˛o£_Æl
();

163 i‡(
r
 >= 0) {

164 i‡(
debug
)

165 
	`˝rötf
("[%08x] WAIT %†%08x\n", 
thi£nv
->
ív_id
, 
¨gv
[0], 
r
);

166 
	`waô
(
r
);

167 i‡(
debug
)

168 
	`˝rötf
("[%08x] waô föished\n", 
thi£nv
->
ív_id
);

173 i‡(
pùe_chûd
) {

174 i‡(
debug
)

175 
	`˝rötf
("[%08x] WAITÖùe_chûd %08x\n", 
thi£nv
->
ív_id
, 
pùe_chûd
);

176 
	`waô
(
pùe_chûd
);

177 i‡(
debug
)

178 
	`˝rötf
("[%08x] waô föished\n", 
thi£nv
->
ív_id
);

182 
	`exô
();

183 
	}
}

197 
	#WHITESPACE
 " \t\r\n"

	)

198 
	#SYMBOLS
 "<|>&;()"

	)

201 
	$_gëtokí
(*
s
, **
p1
, **
p2
)

203 
t
;

205 i‡(
s
 == 0) {

206 i‡(
debug
 > 1)

207 
	`˝rötf
("GETTOKEN NULL\n");

211 i‡(
debug
 > 1)

212 
	`˝rötf
("GETTOKEN: %s\n", 
s
);

214 *
p1
 = 0;

215 *
p2
 = 0;

217 
	`°rchr
(
WHITESPACE
, *
s
))

218 *
s
++ = 0;

219 i‡(*
s
 == 0) {

220 i‡(
debug
 > 1)

221 
	`˝rötf
("EOL\n");

224 i‡(
	`°rchr
(
SYMBOLS
, *
s
)) {

225 
t
 = *
s
;

226 *
p1
 = 
s
;

227 *
s
++ = 0;

228 *
p2
 = 
s
;

229 i‡(
debug
 > 1)

230 
	`˝rötf
("TOK %c\n", 
t
);

231  
t
;

233 *
p1
 = 
s
;

234 *
s
 && !
	`°rchr
(
WHITESPACE
 
SYMBOLS
, *s))

235 
s
++;

236 *
p2
 = 
s
;

237 i‡(
debug
 > 1) {

238 
t
 = **
p2
;

239 **
p2
 = 0;

240 
	`˝rötf
("WORD: %s\n", *
p1
);

241 **
p2
 = 
t
;

244 
	}
}

247 
	$gëtokí
(*
s
, **
p1
)

249 
c
, 
nc
;

250 * 
≈1
, *
≈2
;

252 i‡(
s
) {

253 
nc
 = 
	`_gëtokí
(
s
, &
≈1
, &
≈2
);

256 
c
 = 
nc
;

257 *
p1
 = 
≈1
;

258 
nc
 = 
	`_gëtokí
(
≈2
, &
≈1
, &np2);

259  
c
;

260 
	}
}

264 
	$ußge
()

266 
	`˝rötf
("usage: sh [-dix] [command-file]\n");

267 
	`exô
();

268 
	}
}

271 
	$umaö
(
¨gc
, **
¨gv
)

273 
r
, 
öãø˘ive
, 
echocmds
;

274 
Arg°©e
 
¨gs
;

275 
öãø˘ive
 = '?';

276 
echocmds
 = 0;

277 
	`¨g°¨t
(&
¨gc
, 
¨gv
, &
¨gs
);

278 (
r
 = 
	`¨g√xt
(&
¨gs
)) >= 0)

279 
r
) {

281 
debug
++;

284 
öãø˘ive
 = 1;

287 
echocmds
 = 1;

290 
	`ußge
();

292 i‡(
¨gc
 > 2)

293 
	`ußge
();

294 i‡(
¨gc
 == 2) {

295 
	`˛o£
(0);

296 i‡((
r
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
)) < 0)

297 
	`∑nic
("›í %s: %e", 
¨gv
[1], 
r
);

298 
	`as£π
(
r
 == 0);

300 i‡(
öãø˘ive
 == '?')

301 
öãø˘ive
 = 
	`isc⁄s
(0);

304 *
buf
;

305 
buf
 = 
	`ªadlöe
(
öãø˘ive
 ? "$ " : 
NULL
);

306 i‡(
buf
 =
NULL
) {

307 i‡(
debug
)

308 
	`˝rötf
("EXITING\n");

309 
	`exô
();

311 if(
	`°rcmp
(
buf
, "quit")==0)

312 
	`exô
();

313 i‡(
debug
)

314 
	`˝rötf
("LINE: %s\n", 
buf
);

315 i‡(
buf
[0] == '#')

317 i‡(
echocmds
)

318 
	`¥ötf
("# %s\n", 
buf
);

319 i‡(
debug
)

320 
	`˝rötf
("BEFORE FORK\n");

321 i‡((
r
 = 
	`f‹k
()) < 0)

322 
	`∑nic
("f‹k: %e", 
r
);

323 i‡(
debug
)

324 
	`˝rötf
("FORK: %d\n", 
r
);

325 i‡(
r
 == 0) {

326 
	`runcmd
(
buf
);

327 
	`exô
();

329 
	`waô
(
r
);

332 
	}
}

	@softint.c

3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

8 
asm
 volatile("int $14");

9 
	}
}

	@spawnhello.c

1 
	~<öc/lib.h
>

4 
	$umaö
(
¨gc
, **
¨gv
)

6 
r
;

7 
	`˝rötf
("òamÖ¨íàívú⁄míà%08x\n", 
thi£nv
->
ív_id
);

8 i‡((
r
 = 
	`•aw∆
("/bin/hello", "hello", 0)) < 0)

9 
	`∑nic
("•awn(hñloËÁûed: %e", 
r
);

10 
	}
}

	@spawninit.c

1 
	~<öc/lib.h
>

4 
	$umaö
(
¨gc
, **
¨gv
)

6 
r
;

7 
	`˝rötf
("òamÖ¨íàívú⁄míà%08x\n", 
thi£nv
->
ív_id
);

8 i‡((
r
 = 
	`•aw∆
("init", "init", "one", "two", 0)) < 0)

9 
	`∑nic
("•aw∆(öôËÁûed: %e", 
r
);

10 
	}
}

	@spin.c

4 
	~<öc/lib.h
>

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
ívid_t
 
ív
;

11 
	`˝rötf
("IámÅheÖarent. ForkingÅhe child...\n");

12 i‡((
ív
 = 
	`f‹k
()) == 0) {

13 
	`˝rötf
("IámÅhe child. Spinning...\n");

18 
	`˝rötf
("IámÅheÖarent. RunningÅhe child...\n");

19 
	`sys_yõld
();

20 
	`sys_yõld
();

21 
	`sys_yõld
();

22 
	`sys_yõld
();

23 
	`sys_yõld
();

24 
	`sys_yõld
();

25 
	`sys_yõld
();

26 
	`sys_yõld
();

28 
	`˝rötf
("IámÅheÖarent. KillingÅhe child...\n");

29 
	`sys_ív_de°roy
(
ív
);

30 
	}
}

	@stresssched.c

1 
	~<öc/lib.h
>

3 vﬁ©ûê
	gcou¡î
;

6 
	$umaö
(
¨gc
, **
¨gv
)

8 
i
, 
j
;

9 
£í
;

10 
ívid_t
 
∑ª¡
 = 
	`sys_gëívid
();

13 
i
 = 0; i < 20; i++)

14 i‡(
	`f‹k
() == 0)

16 i‡(
i
 == 20) {

17 
	`sys_yõld
();

22 
ívs
[
	`ENVX
(
∑ª¡
)].
ív_°©us
 !
ENV_FREE
)

23 
asm
 volatile("pause");

26 
i
 = 0; i < 10; i++) {

27 
	`sys_yõld
();

28 
j
 = 0; j < 10000; j++)

29 
cou¡î
++;

32 i‡(
cou¡î
 != 10*10000)

33 
	`∑nic
("ø¿⁄ÅwÿCPU†© on˚ (cou¡î i†%d)", 
cou¡î
);

36 
	`˝rötf
("[%08x] såesssched o¿CPU %d\n", 
thi£nv
->
ív_id
,Åhi£nv->
ív_˝unum
);

38 
	}
}

	@testbss.c

3 
	~<öc/lib.h
>

5 
	#ARRAYSIZE
 (1024*1024)

	)

7 
uöt32_t
 
	gbig¨øy
[
ARRAYSIZE
];

10 
	$umaö
(
¨gc
, **
¨gv
)

12 
i
;

14 
	`˝rötf
("Making sure bss worksÑight...\n");

15 
i
 = 0; i < 
ARRAYSIZE
; i++)

16 i‡(
big¨øy
[
i
] != 0)

17 
	`∑nic
("big¨øy[%d] i¢'à˛óªd!\n", 
i
);

18 
i
 = 0; i < 
ARRAYSIZE
; i++)

19 
big¨øy
[
i
] = i;

20 
i
 = 0; i < 
ARRAYSIZE
; i++)

21 i‡(
big¨øy
[
i
] != i)

22 
	`∑nic
("big¨øy[%d] didn'àhﬁd it†vÆue!\n", 
i
);

24 
	`˝rötf
("Yes, good. Now doingá wild write offÅheÉnd...\n");

25 
big¨øy
[
ARRAYSIZE
+1024] = 0;

26 
	`∑nic
("SHOULD HAVE TRAPPED!!!");

27 
	}
}

	@testfdsharing.c

1 
	~<öc/x86.h
>

2 
	~<öc/lib.h
>

4 
	gbuf
[512], 
	gbuf2
[512];

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
fd
, 
r
, 
n
, 
n2
;

11 i‡((
fd
 = 
	`›í
("mŸd", 
O_RDONLY
)) < 0)

12 
	`∑nic
("›í mŸd: %e", 
fd
);

13 
	`£ek
(
fd
, 0);

14 i‡((
n
 = 
	`ªadn
(
fd
, 
buf
,  buf)) <= 0)

15 
	`∑nic
("ªadn: %e", 
n
);

17 i‡((
r
 = 
	`f‹k
()) < 0)

18 
	`∑nic
("f‹k: %e", 
r
);

19 i‡(
r
 == 0) {

20 
	`£ek
(
fd
, 0);

21 
	`˝rötf
("goingÅoÑead in child (mightÖage fault if your sharing is buggy)\n");

22 i‡((
n2
 = 
	`ªadn
(
fd
, 
buf2
,  buf2)Ë!
n
)

23 
	`∑nic
("ªad i¿∑ª¡ gŸ %d,Ñód i¿chûd gŸ %d", 
n
, 
n2
);

24 i‡(
	`memcmp
(
buf
, 
buf2
, 
n
) != 0)

25 
	`∑nic
("read inÖarent got different bytes fromÑead in child");

26 
	`˝rötf
("read in child succeeded\n");

27 
	`£ek
(
fd
, 0);

28 
	`˛o£
(
fd
);

29 
	`exô
();

31 
	`waô
(
r
);

32 i‡((
n2
 = 
	`ªadn
(
fd
, 
buf2
,  buf2)Ë!
n
)

33 
	`∑nic
("ªad i¿∑ª¡ gŸ %d,Åhí gŸ %d", 
n
, 
n2
);

34 
	`˝rötf
("read inÖarent succeeded\n");

35 
	`˛o£
(
fd
);

37 
	`bªakpoöt
();

38 
	}
}

	@testfile.c

1 
	~<öc/lib.h
>

3 c⁄° *
	gmsg
 = "This isÅhe NEW message ofÅhe day!\n\n";

5 
	#FVA
 ((
Fd
*)0xCCCCC000)

	)

8 
	$x›í
(c⁄° *
∑th
, 
mode
)

10 
Fsùc
 
fsùcbuf
;

11 
ívid_t
 
f£nv
;

13 
	`°r˝y
(
fsùcbuf
.
›í
.
ªq_∑th
, 
∑th
);

14 
fsùcbuf
.
›í
.
ªq_omode
 = 
mode
;

16 
f£nv
 = 
	`ùc_föd_ív
(
ENV_TYPE_FS
);

17 
	`ùc_£nd
(
f£nv
, 
FSREQ_OPEN
, &
fsùcbuf
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

18  
	`ùc_ªcv
(
NULL
, 
FVA
, NULL);

19 
	}
}

22 
	$umaö
(
¨gc
, **
¨gv
)

24 
öt64_t
 
r
, 
f
, 
i
;

25 
Fd
 *
fd
;

26 
Fd
 
fdc›y
;

27 
Sèt
 
°
;

28 
buf
[512];

31 i‡((
r
 = 
	`x›í
("/nŸ-found", 
O_RDONLY
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

32 
	`∑nic
("£rve_›í /nŸ-found: %e", 
r
);

33 i‡(
r
 >= 0)

34 
	`∑nic
("serve_open /not-found succeeded!");

36 i‡((
r
 = 
	`x›í
("/√wmŸd", 
O_RDONLY
)) < 0)

37 
	`∑nic
("£rve_›í /√wmŸd: %e", 
r
);

38 i‡(
FVA
->
fd_dev_id
 !'f' || FVA->
fd_off£t
 !0 || FVA->
fd_omode
 !
O_RDONLY
)

39 
	`∑nic
("serve_open didÇot fill struct Fd correctly\n");

40 
	`˝rötf
("serve_open is good\n");

42 i‡((
r
 = 
devfûe
.
	`dev_°©
(
FVA
, &
°
)) < 0)

43 
	`∑nic
("fûe_°©: %e", 
r
);

44 i‡(
	`°æí
(
msg
Ë!
°
.
°_size
)

45 
	`∑nic
("fûe_°©Ñëu∫ed sizê%d w™ãd %d\n", 
°
.
°_size
, 
	`°æí
(
msg
));

46 
	`˝rötf
("file_stat is good\n");

48 
	`mem£t
(
buf
, 0,  buf);

49 i‡((
r
 = 
devfûe
.
	`dev_ªad
(
FVA
, 
buf
,  buf)) < 0)

50 
	`∑nic
("fûe_ªad: %e", 
r
);

51 i‡(
	`°rcmp
(
buf
, 
msg
) != 0)

52 
	`∑nic
("file_readÑeturned wrong data");

53 
	`˝rötf
("file_read is good\n");

55 i‡((
r
 = 
devfûe
.
	`dev_˛o£
(
FVA
)) < 0)

56 
	`∑nic
("fûe_˛o£: %e", 
r
);

57 
	`˝rötf
("file_close is good\n");

63 
fdc›y
 = *
FVA
;

64 
	`sys_∑ge_unm≠
(0, 
FVA
);

66 i‡((
r
 = 
devfûe
.
	`dev_ªad
(&
fdc›y
, 
buf
,  buf)Ë!-
E_INVAL
)

67 
	`∑nic
("£rve_ªad d€†nŸ h™dÀ sèÀ fûeid†c‹ª˘ly: %e", 
r
);

68 
	`˝rötf
("stale fileid is good\n");

71 i‡((
r
 = 
	`x›í
("/√w-fûe", 
O_RDWR
|
O_CREAT
)) < 0)

72 
	`∑nic
("£rve_›í /√w-fûe: %e", 
r
);

74 
	`˝rötf
("x›íÇew fûêw‹ked devfûê%p, dev_wrôê%p, msg %p, FVA %p\n", 
devfûe
, devfûe.
dev_wrôe
, 
msg
, 
FVA
);

76 i‡((
r
 = 
devfûe
.
	`dev_wrôe
(
FVA
, 
msg
, 
	`°æí
(msg))) != strlen(msg))

77 
	`∑nic
("fûe_wrôe: %e", 
r
);

78 
	`˝rötf
("file_write is good\n");

80 
FVA
->
fd_off£t
 = 0;

81 
	`mem£t
(
buf
, 0,  buf);

82 i‡((
r
 = 
devfûe
.
	`dev_ªad
(
FVA
, 
buf
,  buf)) < 0)

83 
	`∑nic
("fûe_ªadá·î fûe_wrôe: %e", 
r
);

84 i‡(
r
 !
	`°æí
(
msg
))

85 
	`∑nic
("fûe_ªadá·î fûe_wrôêªtu∫ed wr⁄gÜígth: %d", 
r
);

86 i‡(
	`°rcmp
(
buf
, 
msg
) != 0)

87 
	`∑nic
("file_readáfter file_writeÑeturned wrong data");

88 
	`˝rötf
("file_readáfter file_write is good\n");

91 i‡((
r
 = 
	`›í
("/nŸ-found", 
O_RDONLY
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

92 
	`∑nic
("›í /nŸ-found: %e", 
r
);

93 i‡(
r
 >= 0)

94 
	`∑nic
("open /not-found succeeded!");

96 i‡((
r
 = 
	`›í
("/√wmŸd", 
O_RDONLY
)) < 0)

97 
	`∑nic
("›í /√wmŸd: %e", 
r
);

98 
fd
 = (
Fd
*Ë(0xD0000000 + 
r
*
PGSIZE
);

99 i‡(
fd
->
fd_dev_id
 !'f' || fd->
fd_off£t
 !0 || fd->
fd_omode
 !
O_RDONLY
)

100 
	`∑nic
("open didÇot fill struct Fd correctly\n");

101 
	`˝rötf
("open is good\n");

104 i‡((
f
 = 
	`›í
("/big", 
O_WRONLY
|
O_CREAT
)) < 0)

105 
	`∑nic
("¸óà/big: %e", 
f
);

106 
	`mem£t
(
buf
, 0, (buf));

107 
i
 = 0; i < (
NDIRECT
*3)*
BLKSIZE
; i +(
buf
)) {

108 *(*)
buf
 = 
i
;

109 i‡((
r
 = 
	`wrôe
(
f
, 
buf
, (buf))) < 0)

110 
	`∑nic
("wrôê/big@%d: %e", 
i
, 
r
);

112 
	`˛o£
(
f
);

114 i‡((
f
 = 
	`›í
("/big", 
O_RDONLY
)) < 0)

115 
	`∑nic
("›í /big: %e", 
f
);

116 
i
 = 0; i < (
NDIRECT
*3)*
BLKSIZE
; i +(
buf
)) {

117 *(*)
buf
 = 
i
;

118 i‡((
r
 = 
	`ªadn
(
f
, 
buf
, (buf))) < 0)

119 
	`∑nic
("ªad /big@%d: %e", 
i
, 
r
);

120 i‡(
r
 !(
buf
))

121 
	`∑nic
("read /big from %dÑeturned %d < %d bytes",

122 
i
, 
r
, (
buf
));

123 i‡(*(*)
buf
 !
i
)

124 
	`∑nic
("read /big from %dÑeturned bad data %d",

125 
i
, *(*)
buf
);

127 
	`˛o£
(
f
);

128 
	`˝rötf
("large file is good\n");

129 
	}
}

	@testfilero.c

1 
	~<öc/lib.h
>

3 c⁄° *
	gmsg
 = "This isÅhe NEW message ofÅhe day!\n\n";

5 
	#FVA
 ((
Fd
*)0xCCCCC000)

	)

8 
	$x›í
(c⁄° *
∑th
, 
mode
)

10 
Fsùc
 
fsùcbuf
;

11 
ívid_t
 
f£nv
;

13 
	`°r˝y
(
fsùcbuf
.
›í
.
ªq_∑th
, 
∑th
);

14 
fsùcbuf
.
›í
.
ªq_omode
 = 
mode
;

16 
f£nv
 = 
	`ùc_föd_ív
(
ENV_TYPE_FS
);

17 
	`ùc_£nd
(
f£nv
, 
FSREQ_OPEN
, &
fsùcbuf
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

18  
	`ùc_ªcv
(
NULL
, 
FVA
, NULL);

19 
	}
}

22 
	$umaö
(
¨gc
, **
¨gv
)

24 
öt64_t
 
r
, 
f
, 
i
;

25 
Fd
 *
fd
;

26 
Fd
 
fdc›y
;

27 
Sèt
 
°
;

28 
buf
[512];

31 i‡((
r
 = 
	`x›í
("/nŸ-found", 
O_RDONLY
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

32 
	`∑nic
("£rve_›í /nŸ-found: %e", 
r
);

33 i‡(
r
 >= 0)

34 
	`∑nic
("serve_open /not-found succeeded!");

36 i‡((
r
 = 
	`x›í
("/√wmŸd", 
O_RDONLY
)) < 0)

37 
	`∑nic
("£rve_›í /√wmŸd: %e", 
r
);

38 i‡(
FVA
->
fd_dev_id
 !'f' || FVA->
fd_off£t
 !0 || FVA->
fd_omode
 !
O_RDONLY
)

39 
	`∑nic
("serve_open didÇot fill struct Fd correctly\n");

40 
	`˝rötf
("serve_open is good\n");

42 i‡((
r
 = 
devfûe
.
	`dev_°©
(
FVA
, &
°
)) < 0)

43 
	`∑nic
("fûe_°©: %e", 
r
);

44 i‡(
	`°æí
(
msg
Ë!
°
.
°_size
)

45 
	`∑nic
("fûe_°©Ñëu∫ed sizê%d w™ãd %d\n", 
°
.
°_size
, 
	`°æí
(
msg
));

46 
	`˝rötf
("file_stat is good\n");

48 
	`mem£t
(
buf
, 0,  buf);

49 i‡((
r
 = 
devfûe
.
	`dev_ªad
(
FVA
, 
buf
,  buf)) < 0)

50 
	`∑nic
("fûe_ªad: %e", 
r
);

51 i‡(
	`°rcmp
(
buf
, 
msg
) != 0)

52 
	`∑nic
("file_readÑeturned wrong data");

53 
	`˝rötf
("file_read is good\n");

55 i‡((
r
 = 
devfûe
.
	`dev_˛o£
(
FVA
)) < 0)

56 
	`∑nic
("fûe_˛o£: %e", 
r
);

57 
	`˝rötf
("file_close is good\n");

63 
fdc›y
 = *
FVA
;

64 
	`sys_∑ge_unm≠
(0, 
FVA
);

66 i‡((
r
 = 
devfûe
.
	`dev_ªad
(&
fdc›y
, 
buf
,  buf)Ë!-
E_INVAL
)

67 
	`∑nic
("£rve_ªad d€†nŸ h™dÀ sèÀ fûeid†c‹ª˘ly: %e", 
r
);

68 
	`˝rötf
("stale fileid is good\n");

71 i‡((
r
 = 
	`›í
("/nŸ-found", 
O_RDONLY
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

72 
	`∑nic
("›í /nŸ-found: %e", 
r
);

73 i‡(
r
 >= 0)

74 
	`∑nic
("open /not-found succeeded!");

76 i‡((
r
 = 
	`›í
("/√wmŸd", 
O_RDONLY
)) < 0)

77 
	`∑nic
("›í /√wmŸd: %e", 
r
);

78 
fd
 = (
Fd
*Ë(0xD0000000 + 
r
*
PGSIZE
);

79 i‡(
fd
->
fd_dev_id
 !'f' || fd->
fd_off£t
 !0 || fd->
fd_omode
 !
O_RDONLY
)

80 
	`∑nic
("open didÇot fill struct Fd correctly\n");

81 
	`˝rötf
("open is good\n");

84 i‡((
f
 = 
	`›í
("/robig", 
O_RDONLY
)) < 0)

85 
	`∑nic
("›í /robig: %e", 
f
);

86 
i
 = 0; i < (
NDIRECT
*3)*
BLKSIZE
; i +(
buf
)) {

87 *(*)
buf
 = 
i
;

88 i‡((
r
 = 
	`ªadn
(
f
, 
buf
, (buf))) < 0)

89 
	`∑nic
("ªad /robig@%d: %e", 
i
, 
r
);

90 i‡(
r
 !(
buf
))

91 
	`∑nic
("read /robig from %dÑeturned %d < %d bytes",

92 
i
, 
r
, (
buf
));

93 i‡(*(*)
buf
 !
i
)

94 
	`∑nic
("read /robig from %dÑeturned bad data %d",

95 
i
, *(*)
buf
);

97 
	`˛o£
(
f
);

98 
	`˝rötf
("large file is good\n");

99 
	}
}

	@testkbd.c

2 
	~<öc/lib.h
>

5 
	$umaö
(
¨gc
, **
¨gv
)

7 
i
, 
r
;

10 
i
 = 0; i < 10; ++i)

11 
	`sys_yõld
();

13 
	`˛o£
(0);

14 i‡((
r
 = 
	`›íc⁄s
()) < 0)

15 
	`∑nic
("›íc⁄s: %e", 
r
);

16 i‡(
r
 != 0)

17 
	`∑nic
("fú° o≥nc⁄†u£d fd %d", 
r
);

18 i‡((
r
 = 
	`dup
(0, 1)) < 0)

19 
	`∑nic
("dup: %e", 
r
);

22 *
buf
;

24 
buf
 = 
	`ªadlöe
("TypeáÜine: ");

25 i‡(
buf
 !
NULL
)

26 
	`Ârötf
(1, "%s\n", 
buf
);

28 
	`Ârötf
(1, "(end of fileÑeceived)\n");

30 
	}
}

	@testmalloc.c

1 
	~<öc/lib.h
>

4 
	$umaö
(
¨gc
, **
¨gv
)

6 *
buf
;

7 
n
;

8 *
v
;

11 
buf
 = 
	`ªadlöe
("> ");

12 i‡(
buf
 == 0)

13 
	`exô
();

14 i‡(
	`memcmp
(
buf
, "free ", 5) == 0) {

15 
v
 = (*Ë
	`°πﬁ
(
buf
 + 5, 0, 0);

16 
	`‰ì
(
v
);

17 } i‡(
	`memcmp
(
buf
, "malloc ", 7) == 0) {

18 
n
 = 
	`°πﬁ
(
buf
 + 7, 0, 0);

19 
v
 = 
	`mÆloc
(
n
);

20 
	`¥ötf
("\t0x%x\n", (
uöçå_t
Ë
v
);

22 
	`¥ötf
("?unknown command\n");

24 
	}
}

	@testpipe.c

1 
	~<öc/lib.h
>

3 *
	gmsg
 = "Now isÅheÅime foráll good menÅo comeÅoÅheáid ofÅheirÖarty.";

6 
	$umaö
(
¨gc
, **
¨gv
)

8 
buf
[100];

9 
i
, 
pid
, 
p
[2];

11 
bö¨y«me
 = "pipereadeof";

13 i‡((
i
 = 
	`pùe
(
p
)) < 0)

14 
	`∑nic
("pùe: %e", 
i
);

16 i‡((
pid
 = 
	`f‹k
()) < 0)

17 
	`∑nic
("f‹k: %e", 
i
);

19 i‡(
pid
 == 0) {

20 
	`˝rötf
("[%08x]Öùîódeo‡˛o£ %d\n", 
thi£nv
->
ív_id
, 
p
[1]);

21 
	`˛o£
(
p
[1]);

22 
	`˝rötf
("[%08x]Öùîódeo‡ªad¿%d\n", 
thi£nv
->
ív_id
, 
p
[0]);

23 
i
 = 
	`ªadn
(
p
[0], 
buf
,  buf-1);

24 i‡(
i
 < 0)

25 
	`∑nic
("ªad: %e", 
i
);

26 
buf
[
i
] = 0;

27 i‡(
	`°rcmp
(
buf
, 
msg
) == 0)

28 
	`˝rötf
("\npipeÑead closedÖroperly\n");

30 
	`˝rötf
("\ngŸ %d byãs: %s\n", 
i
, 
buf
);

31 
	`exô
();

33 
	`˝rötf
("[%08x]Öùîódeo‡˛o£ %d\n", 
thi£nv
->
ív_id
, 
p
[0]);

34 
	`˛o£
(
p
[0]);

35 
	`˝rötf
("[%08x]Öùîódeo‡wrôê%d\n", 
thi£nv
->
ív_id
, 
p
[1]);

36 i‡((
i
 = 
	`wrôe
(
p
[1], 
msg
, 
	`°æí
(msg))) != strlen(msg))

37 
	`∑nic
("wrôe: %e", 
i
);

38 
	`˛o£
(
p
[1]);

40 
	`waô
(
pid
);

42 
bö¨y«me
 = "pipewriteeof";

43 i‡((
i
 = 
	`pùe
(
p
)) < 0)

44 
	`∑nic
("pùe: %e", 
i
);

46 i‡((
pid
 = 
	`f‹k
()) < 0)

47 
	`∑nic
("f‹k: %e", 
i
);

49 i‡(
pid
 == 0) {

50 
	`˛o£
(
p
[0]);

52 
	`˝rötf
(".");

53 i‡(
	`wrôe
(
p
[1], "x", 1) != 1)

56 
	`˝rötf
("\npipe write closedÖroperly\n");

57 
	`exô
();

59 
	`˛o£
(
p
[0]);

60 
	`˛o£
(
p
[1]);

61 
	`waô
(
pid
);

63 
	`˝rötf
("pipeÅestsÖassed\n");

64 
	}
}

	@testpiperace.c

1 
	~<öc/lib.h
>

4 
	$umaö
(
¨gc
, **
¨gv
)

6 
p
[2], 
r
, 
pid
, 
i
, 
max
;

7 *
va
;

8 
Fd
 *
fd
;

9 c⁄° vﬁ©ûê
Env
 *
kid
;

11 
	`˝rötf
("testing for dupÑace...\n");

12 i‡((
r
 = 
	`pùe
(
p
)) < 0)

13 
	`∑nic
("pùe: %e", 
r
);

14 
max
 = 200;

15 i‡((
r
 = 
	`f‹k
()) < 0)

16 
	`∑nic
("f‹k: %e", 
r
);

17 i‡(
r
 == 0) {

18 
	`˛o£
(
p
[1]);

37 
i
=0; i<
max
; i++) {

38 if(
	`pùeis˛o£d
(
p
[0])){

39 
	`˝rötf
("RACE:Öipeáppears closed\n");

40 
	`exô
();

42 
	`sys_yõld
();

45 
	`ùc_ªcv
(0,0,0);

47 
pid
 = 
r
;

48 
	`˝rötf
("pid i†%d\n", 
pid
);

49 
va
 = 0;

50 
kid
 = &
ívs
[
	`ENVX
(
pid
)];

51 
	`˝rötf
("kid i†%d\n", 
kid
-
ívs
);

52 
	`dup
(
p
[0], 10);

53 
kid
->
ív_°©us
 =
ENV_RUNNABLE
)

54 
	`dup
(
p
[0], 10);

56 
	`˝rötf
("child done withÜoop\n");

57 i‡(
	`pùeis˛o£d
(
p
[0]))

58 
	`∑nic
("somehowÅhe otherÉnd ofÖ[0] got closed!");

59 i‡((
r
 = 
	`fd_lookup
(
p
[0], &
fd
)) < 0)

60 
	`∑nic
("ˇ¬ŸÜook u∞p[0]: %e", 
r
);

61 
va
 = 
	`fd2d©a
(
fd
);

62 i‡(
	`∑gîef
(
va
) != 3+1)

63 
	`˝rötf
("\nchild detectedÑace\n");

65 
	`˝rötf
("\ƒa˚ didn'àh≠≥n\n", 
max
);

66 
	}
}

	@testpiperace2.c

2 
	~<öc/lib.h
>

5 
	$umaö
(
¨gc
, **
¨gv
)

7 
p
[2], 
r
, 
i
;

8 
Fd
 *
fd
;

9 c⁄° vﬁ©ûê
Env
 *
kid
;

11 
	`˝rötf
("testing forÖipeisclosedÑace...\n");

12 i‡((
r
 = 
	`pùe
(
p
)) < 0)

13 
	`∑nic
("pùe: %e", 
r
);

14 i‡((
r
 = 
	`f‹k
()) < 0)

15 
	`∑nic
("f‹k: %e", 
r
);

16 i‡(
r
 == 0) {

20 
	`˛o£
(
p
[1]);

21 
i
 = 0; i < 200; i++) {

22 i‡(
i
 % 10 == 0)

23 
	`˝rötf
("%d.", 
i
);

26 
	`dup
(
p
[0], 10);

27 
	`sys_yõld
();

28 
	`˛o£
(10);

29 
	`sys_yõld
();

31 
	`exô
();

55 
kid
 = &
ívs
[
	`ENVX
(
r
)];

56 
kid
->
ív_°©us
 =
ENV_RUNNABLE
)

57 i‡(
	`pùeis˛o£d
(
p
[0]) != 0) {

58 
	`˝rötf
("\nRACE:Öipeáppears closed\n");

59 
	`sys_ív_de°roy
(
r
);

60 
	`exô
();

62 
	`˝rötf
("child done withÜoop\n");

63 i‡(
	`pùeis˛o£d
(
p
[0]))

64 
	`∑nic
("somehowÅhe otherÉnd ofÖ[0] got closed!");

65 i‡((
r
 = 
	`fd_lookup
(
p
[0], &
fd
)) < 0)

66 
	`∑nic
("ˇ¬ŸÜook u∞p[0]: %e", 
r
);

67 (Ë
	`fd2d©a
(
fd
);

68 
	`˝rötf
("race didn't happen\n");

69 
	}
}

	@testptelibrary.c

1 
	~<öc/lib.h
>

3 
	#VA
 ((*Ë0xA0000000)

	)

4 c⁄° *
	gmsg
 = "hello, world\n";

5 c⁄° *
	gmsg2
 = "goodbye, world\n";

7 
chûdof•awn
();

10 
	$umaö
(
¨gc
, **
¨gv
)

12 
r
;

14 i‡(
¨gc
 != 0)

15 
	`chûdof•awn
();

17 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
VA
, 
PTE_P
|
PTE_W
|
PTE_U
|
PTE_SHARE
)) < 0)

18 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

21 i‡((
r
 = 
	`f‹k
()) < 0)

22 
	`∑nic
("f‹k: %e", 
r
);

23 i‡(
r
 == 0) {

24 
	`°r˝y
(
VA
, 
msg
);

25 
	`exô
();

27 
	`waô
(
r
);

28 
	`˝rötf
("f‹k h™dÀ†PTE_SHARE %s\n", 
	`°rcmp
(
VA
, 
msg
) == 0 ? "right" : "wrong");

31 i‡((
r
 = 
	`•aw∆
("/testptelibrary", "testptelibrary", "arg", 0)) < 0)

32 
	`∑nic
("•awn: %e", 
r
);

33 
	`waô
(
r
);

34 
	`˝rötf
("•aw¿h™dÀ†PTE_SHARE %s\n", 
	`°rcmp
(
VA
, 
msg2
) == 0 ? "right" : "wrong");

35 
	}
}

38 
	$chûdof•awn
()

40 
	`°r˝y
(
VA
, 
msg2
);

41 
	`exô
();

42 
	}
}

	@testpteshare.c

1 
	~<öc/x86.h
>

2 
	~<öc/lib.h
>

4 
	#VA
 ((*Ë0xA0000000)

	)

5 c⁄° *
	gmsg
 = "hello, world\n";

6 c⁄° *
	gmsg2
 = "goodbye, world\n";

8 
chûdof•awn
();

11 
	$umaö
(
¨gc
, **
¨gv
)

13 
r
;

15 i‡(
¨gc
 != 0)

16 
	`chûdof•awn
();

18 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
VA
, 
PTE_P
|
PTE_W
|
PTE_U
|
PTE_SHARE
)) < 0)

19 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

22 i‡((
r
 = 
	`f‹k
()) < 0)

23 
	`∑nic
("f‹k: %e", 
r
);

24 i‡(
r
 == 0) {

25 
	`°r˝y
(
VA
, 
msg
);

26 
	`exô
();

28 
	`waô
(
r
);

29 
	`˝rötf
("f‹k h™dÀ†PTE_SHARE %s\n", 
	`°rcmp
(
VA
, 
msg
) == 0 ? "right" : "wrong");

32 i‡((
r
 = 
	`•aw∆
("/bin/testpteshare", "testpteshare", "arg", 0)) < 0)

33 
	`∑nic
("•awn: %e", 
r
);

34 
	`waô
(
r
);

35 
	`˝rötf
("•aw¿h™dÀ†PTE_SHARE %s\n", 
	`°rcmp
(
VA
, 
msg2
) == 0 ? "right" : "wrong");

37 
	`bªakpoöt
();

38 
	}
}

41 
	$chûdof•awn
()

43 
	`°r˝y
(
VA
, 
msg2
);

44 
	`exô
();

45 
	}
}

	@testshell.c

1 
	~<öc/x86.h
>

2 
	~<öc/lib.h
>

4 
wr⁄g
(, , );

7 
	$umaö
(
¨gc
, **
¨gv
)

9 
c1
, 
c2
;

10 
r
, 
rfd
, 
wfd
, 
kfd
, 
n1
, 
n2
, 
off
, 
∆off
;

11 
pfds
[2];

13 
	`˛o£
(0);

14 
	`˛o£
(1);

15 
	`›íc⁄s
();

16 
	`›íc⁄s
();

18 i‡((
rfd
 = 
	`›í
("ã°shñl.sh", 
O_RDONLY
)) < 0)

19 
	`∑nic
("›íÅe°shñl.sh: %e", 
rfd
);

20 i‡((
wfd
 = 
	`pùe
(
pfds
)) < 0)

21 
	`∑nic
("pùe: %e", 
wfd
);

22 
wfd
 = 
pfds
[1];

24 
	`˝rötf
("running sh -x <Åestshell.sh | cat\n");

25 i‡((
r
 = 
	`f‹k
()) < 0)

26 
	`∑nic
("f‹k: %e", 
r
);

27 i‡(
r
 == 0) {

28 
	`dup
(
rfd
, 0);

29 
	`dup
(
wfd
, 1);

30 
	`˛o£
(
rfd
);

31 
	`˛o£
(
wfd
);

32 i‡((
r
 = 
	`•aw∆
("/bin/sh", "sh", "-x", 0)) < 0)

33 
	`∑nic
("•awn: %e", 
r
);

34 
	`˛o£
(0);

35 
	`˛o£
(1);

36 
	`waô
(
r
);

37 
	`exô
();

39 
	`˛o£
(
rfd
);

40 
	`˛o£
(
wfd
);

42 
rfd
 = 
pfds
[0];

43 i‡((
kfd
 = 
	`›í
("ã°shñl.key", 
O_RDONLY
)) < 0)

44 
	`∑nic
("›íÅe°shñl.key f‹Ñódög: %e", 
kfd
);

46 
∆off
 = 0;

47 
off
=0;; off++) {

48 
n1
 = 
	`ªad
(
rfd
, &
c1
, 1);

49 
n2
 = 
	`ªad
(
kfd
, &
c2
, 1);

50 i‡(
n1
 < 0)

51 
	`∑nic
("ªadögÅe°shñl.out: %e", 
n1
);

52 i‡(
n2
 < 0)

53 
	`∑nic
("ªadögÅe°shñl.key: %e", 
n2
);

54 i‡(
n1
 =0 && 
n2
 == 0)

56 i‡(
n1
 !1 || 
n2
 !1 || 
c1
 !
c2
)

57 
	`wr⁄g
(
rfd
, 
kfd
, 
∆off
);

58 i‡(
c1
 == '\n')

59 
∆off
 = 
off
+1;

61 
	`˝rötf
("shellÑan correctly\n");

63 
	`bªakpoöt
();

64 
	}
}

67 
	$wr⁄g
(
rfd
, 
kfd
, 
off
)

69 
buf
[100];

70 
n
;

72 
	`£ek
(
rfd
, 
off
);

73 
	`£ek
(
kfd
, 
off
);

75 
	`˝rötf
("shellÖroduced incorrect output.\n");

76 
	`˝rötf
("expected:\n===\n");

77 (
n
 = 
	`ªad
(
kfd
, 
buf
,  buf-1)) > 0)

78 
	`sys_˝uts
(
buf
, 
n
);

79 
	`˝rötf
("===\ngot:\n===\n");

80 (
n
 = 
	`ªad
(
rfd
, 
buf
,  buf-1)) > 0)

81 
	`sys_˝uts
(
buf
, 
n
);

82 
	`˝rötf
("===\n");

83 
	`exô
();

84 
	}
}

	@vmm.c

1 
	~<öc/lib.h
>

2 
	~<öc/vmx.h
>

3 
	~<öc/ñf.h
>

4 
	~<öc/ït.h
>

5 
	~<öc/°dio.h
>

7 
	#GUEST_KERN
 "/vmm/kî√l"

	)

8 
	#GUEST_BOOT
 "/vmm/boŸ"

	)

10 
	#JOS_ENTRY
 0x7000

	)

19 
	$m≠_ö_gue°
–
ívid_t
 
gue°
, 
uöçå_t
 
g∑
, 
size_t
 
memsz
,

20 
fd
, 
size_t
 
fûesz
, 
off_t
 
fûeoff£t
 ) {

22  -
E_NO_SYS
;

24 
	}
}

33 
	$c›y_gue°_kîn_g∑
–
ívid_t
 
gue°
, * 
‚ame
 ) {

36  -
E_NO_SYS
;

37 
	}
}

40 
	$umaö
(
¨gc
, **
¨gv
) {

41 
	}
}

	@vmmanager.c

	@writemotd.c

1 
	~<öc/lib.h
>

4 
	$umaö
(
¨gc
, **
¨gv
)

6 
rfd
, 
wfd
;

7 
buf
[512];

8 
n
, 
r
;

10 i‡((
rfd
 = 
	`›í
("/√wmŸd", 
O_RDONLY
)) < 0)

11 
	`∑nic
("›í /√wmŸd: %e", 
rfd
);

12 i‡((
wfd
 = 
	`›í
("/mŸd", 
O_RDWR
)) < 0)

13 
	`∑nic
("›í /mŸd: %e", 
wfd
);

14 
	`˝rötf
("fûêdes¸ùt‹†%d %d\n", 
rfd
, 
wfd
);

15 i‡(
rfd
 =
wfd
)

16 
	`∑nic
("open /newmotdánd /motd give same file descriptor");

18 
	`˝rötf
("OLD MOTD\n===\n");

19 (
n
 = 
	`ªad
(
wfd
, 
buf
,  buf-1)) > 0)

20 
	`sys_˝uts
(
buf
, 
n
);

21 
	`˝rötf
("===\n");

22 
	`£ek
(
wfd
, 0);

24 i‡((
r
 = 
	`·runˇã
(
wfd
, 0)) < 0)

25 
	`∑nic
("åunˇã /mŸd: %e", 
r
);

27 
	`˝rötf
("NEW MOTD\n===\n");

28 (
n
 = 
	`ªad
(
rfd
, 
buf
,  buf-1)) > 0) {

29 
	`sys_˝uts
(
buf
, 
n
);

30 i‡((
r
 = 
	`wrôe
(
wfd
, 
buf
, 
n
)) !=Ç)

31 
	`∑nic
("wrôê/mŸd: %e", 
r
);

33 
	`˝rötf
("===\n");

35 i‡(
n
 < 0)

36 
	`∑nic
("ªad /√wmŸd: %e", 
n
);

38 
	`˛o£
(
rfd
);

39 
	`˛o£
(
wfd
);

40 
	}
}

	@yield.c

3 
	~<öc/lib.h
>

6 
	$umaö
(
¨gc
, **
¨gv
)

8 
i
;

10 
	`˝rötf
("Hñlo, IámÉnvú⁄míà%08x.\n", 
thi£nv
->
ív_id
);

11 
i
 = 0; i < 5; i++) {

12 
	`sys_yõld
();

13 
	`˝rötf
("Back inÉnvironment %08x, iteration %d.\n",

14 
thi£nv
->
ív_id
, 
i
);

16 
	`˝rötf
("AŒ d⁄êöÉnvú⁄míà%08x.\n", 
thi£nv
->
ív_id
);

17 
	}
}

	@
1
.
1
/usr/include
57
658
badsegment.c
breakpoint.c
buggyhello.c
buggyhello2.c
cat.c
divzero.c
dumbfork.c
echo.c
evilhello.c
fairness.c
faultalloc.c
faultallocbad.c
faultbadhandler.c
faultdie.c
faultevilhandler.c
faultnostack.c
faultread.c
faultreadkernel.c
faultregs.c
faultwrite.c
faultwritekernel.c
forktree.c
hello.c
icode.c
idle.c
init.c
initsh.c
ls.c
lsfd.c
num.c
pingpong.c
pingpongs.c
primes.c
primespipe.c
sendpage.c
sh.c
softint.c
spawnhello.c
spawninit.c
spin.c
stresssched.c
testbss.c
testfdsharing.c
testfile.c
testfilero.c
testkbd.c
testmalloc.c
testpipe.c
testpiperace.c
testpiperace2.c
testptelibrary.c
testpteshare.c
testshell.c
vmm.c
vmmanager.c
writemotd.c
yield.c
